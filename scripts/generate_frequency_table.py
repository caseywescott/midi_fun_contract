#!/usr/bin/env python3
"""
MIDI Frequency Table Generator

This script generates the precomputed frequency table used in the Cairo math module
to replace the Orion FP32x32 frequency calculations.

Formula: freq = 440 * 2^((keynum - 69) / 12)
Output: frequencies in Hz * 1000 for integer precision
"""

import math

def generate_frequency_table():
    """Generate frequency table for MIDI notes 0-127"""
    frequencies = []
    
    for keynum in range(128):
        # Standard MIDI frequency formula
        # freq = 440 * 2^((keynum - 69) / 12)
        freq_hz = 440.0 * (2.0 ** ((keynum - 69) / 12.0))
        
        # Convert to integer with 1000x precision
        freq_millihertz = int(round(freq_hz * 1000))
        frequencies.append(freq_millihertz)
    
    return frequencies

def format_cairo_array(frequencies):
    """Format frequencies as a Cairo array"""
    lines = []
    lines.append("fn get_frequency_table() -> Span<u32> {")
    lines.append("    array![")
    
    # Format in groups of 8 for readability
    for i in range(0, len(frequencies), 8):
        group = frequencies[i:i+8]
        formatted_group = ", ".join(f"{freq:8d}" for freq in group)
        comment = f"// {i}-{min(i+7, len(frequencies)-1)}"
        lines.append(f"        {formatted_group}, {comment}")
    
    lines.append("    ].span()")
    lines.append("}")
    
    return "\n".join(lines)

def verify_frequencies():
    """Verify some known frequency values"""
    test_cases = [
        (0, 8.176),      # C-1
        (12, 16.352),    # C0  
        (24, 32.703),    # C1
        (36, 65.406),    # C2
        (48, 130.813),   # C3
        (60, 261.626),   # C4 (Middle C)
        (69, 440.0),     # A4 (Concert A)
        (72, 523.251),   # C5
        (84, 1046.502),  # C6
        (96, 2093.005),  # C7
        (108, 4186.009), # C8
        (120, 8372.018), # C9
        (127, 12543.854) # G9
    ]
    
    frequencies = generate_frequency_table()
    
    print("Frequency Verification:")
    print("MIDI# | Expected (Hz) | Generated (Hz) | Difference")
    print("------|---------------|----------------|------------")
    
    for keynum, expected in test_cases:
        generated_hz = frequencies[keynum] / 1000.0
        diff = abs(generated_hz - expected)
        print(f"{keynum:5d} | {expected:11.3f} | {generated_hz:12.3f} | {diff:8.3f}")

def main():
    print("Generating MIDI Frequency Table for Cairo...")
    print("=" * 50)
    
    frequencies = generate_frequency_table()
    
    # Generate Cairo code
    cairo_code = format_cairo_array(frequencies)
    
    # Save to file
    with open("frequency_table.cairo", "w") as f:
        f.write("// Precomputed MIDI frequency table\n")
        f.write("// Generated by generate_frequency_table.py\n\n")
        f.write(cairo_code)
    
    print(f"Generated frequency table with {len(frequencies)} entries")
    print("Saved to: frequency_table.cairo")
    print()
    
    # Verify some known values
    verify_frequencies()
    
    print("\nFrequency range:")
    print(f"Lowest (MIDI 0):  {frequencies[0]/1000:.3f} Hz")
    print(f"Highest (MIDI 127): {frequencies[127]/1000:.3f} Hz")
    
    print("\nTo use in your Cairo code:")
    print("1. Copy the function from frequency_table.cairo to your math module")
    print("2. Use freq_from_keynum(keynum) to get frequency * 1000")
    print("3. Divide by 1000 if you need the actual Hz value")

if __name__ == "__main__":
    main() 